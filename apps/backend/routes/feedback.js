// apps/backend/routes/feedback.js
import { logger } from '../utils/logger.js';
import express from "express";
import multer from "multer";
import path from "path";
import fs from "fs";
import { v4 as uuidv4 } from "uuid";

import { transcribeAudio } from "../lib/transcriber.js";
import { mockClaude } from "../mock/claude.js";
import { supabase } from "../lib/supabase.js";
import { sendAlert } from "../lib/telegram.js";
import { uploadAudioToSupabase } from "../lib/storage.js";

const router = express.Router();

/** ---------- ensure uploads dir exists ---------- */
const UPLOAD_DIR = "uploads";
try { fs.mkdirSync(UPLOAD_DIR, { recursive: true }); } catch { /* no-op */ }

/** ---------- Multer: storage + limits + fileFilter ---------- */
const storage = multer.diskStorage({
  destination: (req, file, cb) => cb(null, UPLOAD_DIR),
  filename: (req, file, cb) => {
    const ext = (path.extname(file.originalname) || "").toLowerCase();
    cb(null, `audio-${Date.now()}${ext}`);
  },
});

const ALLOWED_MIME = new Set([
  "audio/mpeg", "audio/mp3",
  "audio/wav", "audio/x-wav",
  "audio/webm", "audio/ogg",
  "audio/mp4", "audio/x-m4a",
]);

const upload = multer({
  storage,
  limits: { fileSize: 20 * 1024 * 1024, files: 1 }, // 20MB
  fileFilter: (req, file, cb) => {
    if (ALLOWED_MIME.has(file.mimetype)) return cb(null, true);
    cb(new Error(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: ${file.mimetype}`));
  },
});

// –û–±—ë—Ä—Ç–∫–∞, —á—Ç–æ–±—ã –ª–æ–≤–∏—Ç—å –æ—à–∏–±–∫–∏ Multer –∫—Ä–∞—Å–∏–≤–æ
const uploadAudio = (req, res, next) => {
  upload.single("audio")(req, res, (err) => {
    if (!err) return next();
    if (err instanceof multer.MulterError) {
      const map = {
        LIMIT_FILE_SIZE: "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º 20MB.",
        LIMIT_FILE_COUNT: "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤. –†–∞–∑—Ä–µ—à—ë–Ω 1.",
      };
      return res.status(400).json({ error: map[err.code] || err.message });
    }
    return res.status(400).json({ error: err.message });
  });
};

/** -------------------- ROUTES (–ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω) -------------------- */

// üÜï GET /feedback/full/:id
router.get("/full/:id", async (req, res) => {
  console.log("üìå [GET /feedback/full/:id]", req.params.id);
  try {
    const { data, error } = await supabase
      .from("feedbacks")
      .select("*")
      .eq("id", req.params.id)
      .single();

    if (error || !data) {
      console.error("‚ùå –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return res.status(404).json({ error: "–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    console.log("‚úÖ –û—Ç–∑—ã–≤ –Ω–∞–π–¥–µ–Ω:", data.id);
    return res.json({ status: "ok", feedback: data });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ GET /feedback/full/:id:", err.message);
    return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–¥–±—ç–∫–∞" });
  }
});

// üéØ GET /feedback/get-audio/:id?ttl=1209600
router.get("/get-audio/:id", async (req, res) => {
  console.log("üìå [GET /feedback/get-audio/:id] ID:", req.params.id);
  try {
    const { data, error } = await supabase
      .from("feedbacks")
      .select("audio_path")
      .eq("id", req.params.id)
      .single();

    if (error || !data) {
      console.error("‚ùå –§–∏–¥–±—ç–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω:", error);
      return res.status(404).json({ error: "–§–∏–¥–±—ç–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    const requestedTtl = Number.parseInt(req.query.ttl || process.env.SIGNED_URL_TTL || "1209600", 10);
    // –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ä–∞–º–∫–∏: –æ—Ç 60 —Å–µ–∫ –¥–æ 14 –¥–Ω–µ–π
    const ttl = Math.min(Math.max(requestedTtl || 60, 60), 1209600);

    const { data: s, error: se } = await supabase.storage
      .from(process.env.SUPABASE_BUCKET)
      .createSignedUrl(data.audio_path, ttl);

    if (se) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è signed URL:", se.message);
      return res.status(500).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å signed URL" });
    }

    console.log(`üîê Signed URL (${ttl} —Å–µ–∫):`, s.signedUrl);
    return res.json({ signedUrl: s.signedUrl, ttl });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ GET /feedback/get-audio/:id:", err.message);
    return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ" });
  }
});

// üîÅ GET /feedback/redirect-audio/:id ‚Äî –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç.–∫. –≥–µ–Ω–µ—Ä–∏—Ç URL –Ω–∞ –∫–∞–∂–¥—ã–π –∫–ª–∏–∫
router.get("/redirect-audio/:id", async (req, res) => {
  try {
    const { data, error } = await supabase
      .from("feedbacks")
      .select("audio_path")
      .eq("id", req.params.id)
      .single();

    if (error || !data) {
      return res.status(404).send("Not found");
    }

    // –∫–æ—Ä–æ—Ç–∫–∏–π TTL –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —Ç.–∫. —Ä–µ–¥–∏—Ä–µ–∫—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
    const { data: s, error: se } = await supabase.storage
      .from(process.env.SUPABASE_BUCKET)
      .createSignedUrl(data.audio_path, 300); // 5 –º–∏–Ω—É—Ç

    if (se || !s?.signedUrl) {
      return res.status(500).send("Failed to sign");
    }

    return res.redirect(302, s.signedUrl);
  } catch (e) {
    return res.status(500).send("Internal error");
  }
});

// üì• POST /feedback
router.post("/", uploadAudio, async (req, res) => {
  console.log("üìå [POST /feedback] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å");
  console.log("üì¶ req.body:", req.body);
  console.log("üì¶ req.file:", req.file);

  const tmpPath = req.file?.path;

  try {
    const { shop_id, device_id, is_anonymous } = req.body;

    if (!shop_id) {
      return res.status(400).json({ error: "shop_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
    }
    if (!tmpPath) {
      console.error("‚ùå –§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω");
      return res.status(400).json({ error: "–ê—É–¥–∏–æ-—Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω" });
    }

    // 1Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Supabase Storage
    console.log("‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Supabase...");
    const uploaded = await uploadAudioToSupabase(tmpPath);
    if (!uploaded) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Supabase");
      return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Supabase Storage" });
    }
    console.log("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ. storagePath:", uploaded.storagePath);
    console.log("üîê Signed URL –¥–ª—è AssemblyAI:", uploaded.signedUrl);

    // 2Ô∏è‚É£ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è (AAI –∏–Ω–æ–≥–¥–∞ –æ—Ç–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç)
    console.log("üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ AssemblyAI –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é+–∞–Ω–∞–ª–∏–∑...");
    const raw = await transcribeAudio(uploaded.signedUrl);
    const transcript =
      typeof raw === "string" ? raw : (raw && typeof raw.text === "string" ? raw.text : "");

    const preview = (transcript || "").replace(/\s+/g, " ").slice(0, 80) + (transcript && transcript.length > 80 ? "‚Ä¶" : "");
    console.log("üìù –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (–ø—Ä–µ–≤—å—é)", preview);

    if (!transcript || !transcript.trim()) {
      console.warn("‚ö†Ô∏è –ü—É—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è");
      return res.status(400).json({ error: "–ê—É–¥–∏–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ—á–∏ –∏–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ" });
    }

    // 3Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ (–ø–æ–∫–∞ mock)
    const analysis = mockClaude(transcript);
    console.log("üìä –ê–Ω–∞–ª–∏–∑:", analysis);

    // 4Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    const feedback = {
      id: uuidv4(),
      shop_id,
      device_id: device_id || null,
      is_anonymous: String(is_anonymous).toLowerCase() === "true",
      audio_path: uploaded.storagePath,
      transcript,
      timestamp: new Date().toISOString(),
      ...analysis,
    };

    feedback.emotion_score = Number.parseFloat(feedback.emotion_score);
    if (Number.isNaN(feedback.emotion_score)) feedback.emotion_score = null;

    console.log("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–¥–±—ç–∫ –≤ Supabase...");
    const { error: insertError } = await supabase.from("feedbacks").insert([feedback]);
    if (insertError) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î:", insertError);
      return res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É" });
    }
    console.log("‚úÖ –§–∏–¥–±—ç–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω:", feedback.id);

    // 5Ô∏è‚É£ Telegram Alert ‚Äî –í–°–ï–ì–î–ê –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º (–±–µ–∑ –ø–æ—Ä–æ–≥–æ–≤/—É—Å–ª–æ–≤–∏–π)
    console.log("üö® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram Alert (–±–µ–∑ —É—Å–ª–æ–≤–∏–π)...");
    sendAlert(feedback).catch((e) => console.warn("‚ö†Ô∏è Telegram alert error:", e.message));

    return res.json({ status: "ok", feedback_id: feedback.id });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ POST /feedback:", err);
    return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∏–¥–±—ç–∫–∞" });
  } finally {
    // 6Ô∏è‚É£ –ß–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤—Å–µ–≥–¥–∞
    if (tmpPath && fs.existsSync(tmpPath)) {
      try {
        fs.unlinkSync(tmpPath);
        console.log("üóë –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω");
      } catch (e) {
        console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:", e.message);
      }
    }
  }
});

// üîé GET /feedback/:shop_id?since=ISO&limit=50
router.get("/:shop_id", async (req, res) => {
  const shopId = req.params.shop_id;
  const since = req.query.since || "1970-01-01T00:00:00Z";
  const limit = Math.min(Number.parseInt(req.query.limit || "50", 10), 100);

  console.log("üìå [GET /feedback/:shop_id]", { shopId, since, limit });

  try {
    const { data, error } = await supabase
      .from("feedbacks")
      .select("id,timestamp,sentiment,emotion_score")
      .eq("shop_id", shopId)
      .gte("timestamp", since)
      .order("timestamp", { ascending: false })
      .limit(limit);

    if (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∫–∏ –∏–∑ –ë–î:", error);
      return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∫–∏" });
    }
    console.log("–ù–∞–π–¥–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤:", data?.length || 0);
    return res.json(data || []);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ GET /feedback/:shop_id:", err.message);
    return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–µ–Ω—Ç—ã" });
  }
});

/** ================== DEBUG ROUTES ================== */

// GET /feedback/debug/list?shop_id=shop_001&limit=20&offset=0
router.get("/debug/list", async (req, res) => {
  try {
    const { shop_id, limit = 20, offset = 0 } = req.query;

    let q = supabase
      .from("feedbacks")
      .select("id,shop_id,device_id,timestamp,sentiment,emotion_score,audio_path")
      .order("timestamp", { ascending: false })
      .range(Number(offset), Number(offset) + Number(limit) - 1);

    if (shop_id) q = q.eq("shop_id", shop_id);

    const { data, error } = await q;
    if (error) {
      console.error("‚ùå [debug/list] Supabase error:", error);
      return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∫–∏" });
    }

    return res.json({ status: "ok", count: data?.length || 0, items: data || [] });
  } catch (e) {
    console.error("‚ùå [debug/list] Error:", e);
    return res.status(500).json({ error: "Internal error" });
  }
});

// GET /feedback/debug/audit/:id
router.get("/debug/audit/:id", async (req, res) => {
  try {
    const { id } = req.params;

    const { data, error } = await supabase
      .from("feedbacks")
      .select("*")
      .eq("id", id)
      .single();

    if (error || !data) {
      console.error("‚ùå [debug/audit] not found:", error);
      return res.status(404).json({ error: "–§–∏–¥–±—ç–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    let signedUrl = null;
    if (data.audio_path) {
      const { data: s, error: se } = await supabase.storage
        .from(process.env.SUPABASE_BUCKET)
        .createSignedUrl(data.audio_path, 60);
      if (!se) signedUrl = s?.signedUrl || null;
      else console.warn("‚ö†Ô∏è [debug/audit] signed url error:", se.message);
    }

    const transcriptPreview = (data.transcript || "").replace(/\s+/g, " ").slice(0, 120);

    return res.json({
      status: "ok",
      id: data.id,
      shop_id: data.shop_id,
      device_id: data.device_id,
      timestamp: data.timestamp,
      sentiment: data.sentiment,
      emotion_score: data.emotion_score,
      tags: data.tags,
      summary: data.summary,
      audio_path: data.audio_path,
      transcript_preview: transcriptPreview,
      signed_url_60s: signedUrl,
    });
  } catch (e) {
    console.error("‚ùå [debug/audit] Error:", e);
    return res.status(500).json({ error: "Internal error" });
  }
});

export default router;
