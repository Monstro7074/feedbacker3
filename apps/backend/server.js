// server.js (ES-–º–æ–¥—É–ª—å)
import compression from 'compression';
import rateLimit from 'express-rate-limit';
import express from 'express';
import dotenv from 'dotenv';
import fs from 'fs';
import cors from 'cors';
import adminRoutes from './routes/admin.js';
import swaggerUi from 'swagger-ui-express';
import feedbackRoutes from './routes/feedback.js';
import requestId from './middleware/requestId.js'; // ‚¨ÖÔ∏è —Ñ–∏–∫—Å: default import
import { logger } from './utils/logger.js';
import onFinished from 'on-finished';

dotenv.config();
const app = express();

// –ß—Ç–æ–±—ã rateLimit –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å—á–∏—Ç–∞–ª IP –∑–∞ –ø—Ä–æ–∫—Å–∏ (Replit/PAAS)
app.set('trust proxy', 1);

/**
 * ---- GZIP ----
 * –°–∂–∏–º–∞–µ–º –æ—Ç–≤–µ—Ç—ã (–º–µ–Ω—å—à–µ —Ç—Ä–∞—Ñ–∏–∫–∞ ‚Üí –Ω–∏–∂–µ latency)
 */
app.use(compression());

/**
 * ---- Rate limit –¥–ª—è /feedback ----
 * –†–µ–∂–µ–º –±—É—Ä—Å—Ç-–ª–∏—Å—Ç—ã –∏ –∑–∞—â–∏—â–∞–µ–º API –æ—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö ¬´–¥–¥–æ—Å–æ–≤¬ª
 */
const listLimiter = rateLimit({
  windowMs: 60 * 1000, // 1 –º–∏–Ω—É—Ç–∞
  limit: 120,          // –¥–æ 120 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É –Ω–∞ IP
  standardHeaders: true,
  legacyHeaders: false,
});
app.use('/feedback', listLimiter);

/**
 * ---- CORS ----
 * –í .env:
 * CORS_ORIGINS=https://web.postman.co,https://<—Ç–≤–æ—è-replit-—Å—Å—ã–ª–∫–∞>
 * –ï—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî —Ä–∞–∑—Ä–µ—à–∏–º –≤—Å–µ Origin (—É–¥–æ–±–Ω–æ –≤ dev).
 */
const allowed = new Set(
  (process.env.CORS_ORIGINS || '')
    .split(',')
    .map(s => s.trim())
    .filter(Boolean)
);

const corsOptions = {
  origin: (origin, cb) => {
    // –ó–∞–ø—Ä–æ—Å—ã –±–µ–∑ Origin (Postman Desktop/cURL) ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if (!origin) return cb(null, true);
    if (allowed.size === 0 || allowed.has(origin)) return cb(null, true);
    return cb(new Error(`Not allowed by CORS: ${origin}`));
  },
  methods: ['GET', 'POST', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization'],
  credentials: true,
  maxAge: 600
};

/**
 * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –∞–¥–º–∏–Ω–∫–∏
 */
app.use('/admin', adminRoutes);

/**
 * –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware –∏ access-–ª–æ–≥ –∏–º–ø–æ—Ä—Ç—ã + app.use –ø–æ—Å–ª–µ gzip/CORS/ratelimit –∏ –¥–æ —Ä–æ—É—Ç–æ–≤
 */
app.use(cors(corsOptions));

app.use(requestId()); // ‚¨ÖÔ∏è —Ñ–∏–∫—Å: –≤—ã–∑—ã–≤–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É

app.use((req, res, next) => {
  const start = Date.now();
  logger.info(req.id, 'üì• request:start', {
    method: req.method,
    url: req.originalUrl,
    ip: req.ip,
    ua: req.headers['user-agent']
  });
  onFinished(res, () => {
    const dur = Date.now() - start;
    logger.info(req.id, 'üì§ request:finish', {
      status: res.statusCode,
      duration_ms: dur
    });
  });
  next();
});

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ preflight –±–µ–∑ path-to-regexp "*"
app.use((req, res, next) => {
  if (req.method === 'OPTIONS') {
    const origin = req.headers.origin;
    if (!origin || allowed.size === 0 || allowed.has(origin)) {
      res.header('Access-Control-Allow-Origin', origin || '*');
      res.header('Vary', 'Origin');
      res.header('Access-Control-Allow-Credentials', 'true');
      res.header('Access-Control-Allow-Methods', 'GET,POST,OPTIONS');
      res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');
      res.header('Access-Control-Max-Age', '600');
      return res.sendStatus(204);
    }
  }
  next();
});

// –Ω–∞ –≤—Å—è–∫–∏–π: health
app.get('/health', (req, res) => res.json({ status: 'ok' }));

// ‚ö†Ô∏è JSON-–ø–∞—Ä—Å–µ—Ä ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è JSON (multipart –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç multer –≤ —Ä–æ—É—Ç–µ)
app.use((req, res, next) => {
  if (req.is && req.is('application/json')) {
    express.json({ limit: '1mb' })(req, res, next);
  } else {
    next();
  }
});

// Swagger
const swaggerDocument = JSON.parse(fs.readFileSync('./swagger.json', 'utf8'));
app.use('/docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));

// Root: –∫–æ—Ä–æ—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –∏ —Å—Å—ã–ª–∫–∏
app.get('/', (req, res) => {
  res.status(200).json({
    status: 'ok',
    name: 'Feedbacker API',
    health: '/health',
    docs: '/docs',
    version: process.env.npm_package_version || '1.0.0'
  });
});

// API
app.use('/feedback', feedbackRoutes);

// –ó–∞–ø—É—Å–∫
const PORT = process.env.PORT || 3000;
const HOST = process.env.HOST || '0.0.0.0';
app.listen(PORT, HOST, () => {
  const external = process.env.RENDER_EXTERNAL_URL || `http://${HOST}:${PORT}`;
  console.log(`‚úÖ Feedbacker API —Ä–∞–±–æ—Ç–∞–µ—Ç: ${external}`);
});
