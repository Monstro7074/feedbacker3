// apps/backend/lib/transcriber.js
import { redactUrl, redactAny } from '../utils/logSafe.js';

/** –ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è ru */
function heuristicRU(text) {
  const t = (text || '').toLowerCase();
  const pos = ['–æ—Ç–ª–∏—á–Ω–æ','—Å—É–ø–µ—Ä','–Ω—Ä–∞–≤–∏—Ç—Å—è','–∫–ª–∞—Å—Å','—Ö–æ—Ä–æ—à–æ','—É–¥–æ–±–Ω–æ','—Å–ø–∞—Å–∏–±–æ','–ª—é–±–ª—é','—Ä–µ–∫–æ–º–µ–Ω–¥—É—é','–ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å','–∏–¥–µ–∞–ª—å–Ω–æ','–±—ã—Å—Ç—Ä–æ'];
  const neg = ['–ø–ª–æ—Ö–æ','—É–∂–∞—Å–Ω–æ','–Ω–µ–Ω–∞–≤–∏–∂—É','–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è','–¥–æ—Ä–æ–≥–æ','–¥–æ–ª–≥–æ','–≥—Ä—É–±–æ','–ø—Ä–æ–±–ª–µ–º–∞','–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç','—É–∂–∞—Å','–∫–æ—à–º–∞—Ä','—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ','–≤–æ–∑–≤—Ä–∞—Ç','–±—Ä–∞–∫','–≥—Ä—è–∑–Ω–æ'];
  let p = 0, n = 0;
  for (const w of pos) if (t.includes(w)) p++;
  for (const w of neg) if (t.includes(w)) n++;
  // 0..1, –±–∞–∑–æ–≤–æ 0.5
  let score = 0.5;
  if (p || n) score = Math.min(1, Math.max(0, 0.5 + (p - n) * 0.15));
  const sentiment = score > 0.6 ? 'positive' : score < 0.4 ? 'negative' : 'neutral';

  // —Ç–µ–≥–∏ ‚Äî —Ç–æ–ø-3 —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ–º—ã—Ö —Å–ª–æ–≤ –¥–ª–∏–Ω–æ–π 5+, –æ—á–µ–Ω—å –≥—Ä—É–±–æ
  const words = t.replace(/[^\p{L}\s]+/gu, ' ').split(/\s+/).filter(x => x.length >= 5);
  const freq = new Map();
  for (const w of words) freq.set(w, (freq.get(w) || 0) + 1);
  const tags = [...freq.entries()].sort((a,b)=>b[1]-a[1]).slice(0,3).map(x=>x[0]);

  const summary = t.replace(/\s+/g, ' ').slice(0, 300);
  return { sentiment, emotion_score: Number(score.toFixed(2)), tags, summary };
}

// –û—Å—Ç–∞–≤–ª—è–µ–º mapAAI –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π (–Ω–∞ –±—É–¥—É—â–µ–µ), –Ω–æ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º AAI-–∞–Ω–∞–ª–∏–∑.
function mapAAI(result) {
  return heuristicRU(result?.text || '');
}

async function createTranscript(payload) {
  // –í–ê–ñ–ù–û: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ –∂–µ endpoint'—ã, –∫–æ—Ç–æ—Ä—ã–µ —É —Ç–µ–±—è —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –ø—Ä–æ–¥–µ
  const res = await fetch('https://api.assemblyai.com/v2/transcript', {
    method: 'POST',
    headers: {
      authorization: process.env.ASSEMBLYAI_API_KEY || '',
      'content-type': 'application/json',
    },
    body: JSON.stringify(payload),
  });
  const data = await res.json().catch(() => ({}));
  return { ok: res.ok, data };
}

/**
 * –¢–û–õ–¨–ö–û —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç (–±–µ–∑ AAI sentiment/entity), –∞–Ω–∞–ª–∏–∑ ‚Äî –Ω–∞—à–µ–π —ç–≤—Ä–∏—Å—Ç–∏–∫–æ–π.
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç { text, analysis, raw }
 */
export async function transcribeAudio(
  audioUrl,
  { pollIntervalMs = 3000, maxWaitMs = 180000 } = {}
) {
  try {
    if (!process.env.ASSEMBLYAI_API_KEY) throw new Error('ASSEMBLYAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω');
    if (!audioUrl) throw new Error('audioUrl –Ω–µ —É–∫–∞–∑–∞–Ω');

    // ‚õîÔ∏è –ú–∞—Å–∫–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π token= –≤ URL –ø–µ—Ä–µ–¥ –ª–æ–≥–æ–º
    console.log('üéØ URL –¥–ª—è AssemblyAI:', redactUrl(audioUrl));

    // –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞–Ω–∏–µ –ë–ï–ó sentiment_analysis / entity_detection ‚Äî —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å –≤–∞—Ä–Ω–∏–Ω–≥ –∏ –æ—à–∏–±–∫–∏
    const payload = {
      audio_url: audioUrl,
      language_code: 'ru',
      punctuate: true,
      format_text: true
    };

    const { ok, data } = await createTranscript(payload);
    if (!ok) throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: ${data?.error || 'unknown'}`);

    const transcriptId = data.id;
    if (!transcriptId) throw new Error('–ù–µ –ø–æ–ª—É—á–µ–Ω transcript_id');
    console.log(`üì° AssemblyAI transcript_id: ${transcriptId}`);

    // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    const started = Date.now();
    let last = '';
    while (true) {
      if (Date.now() - started > maxWaitMs) throw new Error('–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏');

      await new Promise(r => setTimeout(r, pollIntervalMs));

      const pollRes = await fetch(`https://api.assemblyai.com/v2/transcript/${transcriptId}`, {
        headers: { authorization: process.env.ASSEMBLYAI_API_KEY || '' },
      });
      const js = await pollRes.json().catch(() => ({}));

      if (js.status !== last) { last = js.status; console.log('‚åõ –°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:', last); }

      if (js.status === 'completed') {
        const text = String(js.text || '');
        const analysis = heuristicRU(text); // –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ ‚Äî –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ
        console.log('üìù –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ (120—Å–∏–º–≤):', text.replace(/\s+/g,' ').slice(0,120), '...');
        return { text, analysis, raw: js };
      }
      if (js.status === 'error') throw new Error(`–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: ${js.error || 'unknown'}`);
    }
  } catch (err) {
    // ‚õîÔ∏è –ú–∞—Å–∫–∏—Ä—É–µ–º –ª—é–±—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ URL/—Ç–æ–∫–µ–Ω—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ–± –æ—à–∏–±–∫–∞—Ö
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ transcribeAudio:', redactAny(err?.message || err));
    return { text: '', analysis: heuristicRU(''), raw: null };
  }
}
