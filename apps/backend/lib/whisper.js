import fs from 'fs';
import path from 'path';
import fetch from 'node-fetch';
import OpenAI from 'openai';
import dotenv from 'dotenv';

dotenv.config();

// üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API-–∫–ª—é—á–∞
if (!process.env.OPENAI_API_KEY) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!');
  throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á OpenAI API. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ .env –∏–ª–∏ Replit Secrets.');
}

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

/**
 * üì• –°–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ –ø–æ URL –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
 * @param {string} audioUrl - –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ mp3/m4a/webm/wav
 * @returns {Promise<string>} –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
 */
async function downloadToTempFile(audioUrl) {
  console.log(`‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ: ${audioUrl}`);

  const res = await fetch(audioUrl);
  if (!res.ok) throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ: ${res.statusText}`);

  const buffer = await res.arrayBuffer();
  const tempFilename = `whisper-${Date.now()}.mp3`;
  const tempPath = path.join('/tmp', tempFilename);

  fs.writeFileSync(tempPath, Buffer.from(buffer));
  console.log(`üíæ –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${tempPath}`);
  return tempPath;
}

/**
 * üß† –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Whisper API
 * @param {string} audioUrl - –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ mp3/m4a/webm/wav
 * @returns {Promise<string>} —Ç–µ–∫—Å—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
 */

console.log("üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞ –ø–µ—Ä–µ–¥ Whisper:", process.env.OPENAI_API_KEY ? "OK" : "MISSING");

export async function transcribeAudio(audioUrl) {
  // 1. –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ
  const filePath = await downloadToTempFile(audioUrl);

  try {
    // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Whisper
    console.log('üéô –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI Whisper...');
    const response = await openai.audio.transcriptions.create({
      file: fs.createReadStream(filePath),
      model: 'whisper-1',
    });

    console.log('üìÑ Whisper –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç:', response.text);
    return response.text;
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Whisper:', err);
    throw err;
  } finally {
    // 3. –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    try {
      fs.unlinkSync(filePath);
      console.log(`üóë –£–¥–∞–ª—ë–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${filePath}`);
    } catch (unlinkErr) {
      console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: ${unlinkErr.message}`);
    }
  }
}
