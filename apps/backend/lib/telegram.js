// apps/backend/lib/telegram.js

/**
 * –ù–∞–¥—ë–∂–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¢–µ–ª–µ–≥—Ä–∞–º-–∞–ª–µ—Ä—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö chat_id –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
 * –ù–µ –∫–∏–¥–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Ñ–µ–π–ª–∞—Ö ‚Äî –ª–æ–≥–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ö–æ—Ç—è –±—ã –≤ –æ–¥–∏–Ω —á–∞—Ç.
 */

const TG_API = 'https://api.telegram.org';

function htmlEscape(s = '') {
  return String(s)
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;');
}

function fmtPercent01(x) {
  const n = Number.isFinite(x) ? Math.max(0, Math.min(1, x)) : 0.5;
  return (n * 100).toFixed(0) + '%';
}

function sentimentIcon(sentiment) {
  const s = (sentiment || '').toLowerCase();
  if (s.startsWith('–Ω–µ–≥–∞—Ç–∏–≤')) return 'üî¥';
  if (s.startsWith('–ø–æ–∑–∏—Ç–∏–≤')) return 'üü¢';
  return 'üü°';
}

function isCritical(sentiment, score) {
  const s = (sentiment || '').toLowerCase();
  const v = Number(score);
  return s.startsWith('–Ω–µ–≥–∞—Ç–∏–≤') && Number.isFinite(v) && v <= 0.4;
}

/**
 * –ì–æ—Ç–æ–≤–∏—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (HTML)
 */
function buildMessage(feedback) {
  const {
    id,
    shop_id,
    device_id,
    timestamp,
    sentiment,
    emotion_score,
    tags = [],
    summary = '',
    transcript = '',
  } = feedback || {};

  const icon = sentimentIcon(sentiment);
  const critical = isCritical(sentiment, emotion_score) ? ' ‚Äî <b>–ö–†–ò–¢–ò–ß–ù–û</b>' : '';
  const scoreStr = fmtPercent01(emotion_score);

  const safeSummary = htmlEscape(summary || '').trim();
  const safeTranscript = htmlEscape((transcript || '').replace(/\s+/g, ' ').slice(0, 240)).trim();
  const safeTags = tags && tags.length ? htmlEscape(tags.join(', ')) : '‚Äî';

  const base = process.env.PUBLIC_BASE_URL || 'https://feedbacker3.onrender.com';
  const linkAudio = `${base}/feedback/get-audio/${id}`;
  const linkFull = `${base}/feedback/full/${id}`;

  const header =
    `${icon} <b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤</b>${critical}\n` +
    `–ú–∞–≥–∞–∑–∏–Ω: <b>${htmlEscape(shop_id || '‚Äî')}</b> ¬∑ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: <b>${htmlEscape(device_id || '‚Äî')}</b>\n` +
    `–í—Ä–µ–º—è: <i>${htmlEscape(timestamp || new Date().toISOString())}</i>\n`;

  const analytics =
    `–û—Ü–µ–Ω–∫–∞ —ç–º–æ—Ü–∏–π: <b>${htmlEscape(sentiment || '‚Äî')}</b> (${scoreStr})\n` +
    `–¢–µ–≥–∏: <b>${safeTags}</b>\n` +
    (safeSummary ? `–ö—Ä–∞—Ç–∫–æ: ‚Äú${safeSummary}‚Äù\n` : '');

  const links =
    `<a href="${linkFull}">–î–µ—Ç–∞–ª–∏</a> ¬∑ <a href="${linkAudio}">–ê—É–¥–∏–æ</a>`;

  const tail = safeTranscript ? `\n<i>${safeTranscript}</i>` : '';

  return `${header}\n${analytics}${links}${tail}`;
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
async function sendToChat({ token, chatId, text, parseMode = 'HTML', timeoutMs = 8000 }) {
  const url = `${TG_API}/bot${token}/sendMessage`;

  const controller = new AbortController();
  const to = setTimeout(() => controller.abort(), timeoutMs);

  try {
    const resp = await fetch(url, {
      method: 'POST',
      signal: controller.signal,
      headers: { 'content-type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text,
        parse_mode: parseMode,
        disable_web_page_preview: true,
      }),
    });
    clearTimeout(to);

    let data = null;
    try { data = await resp.json(); } catch { /* ignore */ }

    if (!resp.ok || data?.ok === false) {
      const errMsg = data?.description || `HTTP ${resp.status}`;
      console.warn(`‚ö†Ô∏è Telegram sendMessage failed for chat ${chatId}: ${errMsg}`);
      return false;
    }
    return true;
  } catch (e) {
    clearTimeout(to);
    console.warn(`‚ö†Ô∏è Telegram request error for chat ${chatId}: ${e?.message || e}`);
    return false;
  }
}

/**
 * –ü—É–±–ª–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 * @param {object} feedback ‚Äî –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç–µ –≤ –ë–î (id, shop_id, sentiment, emotion_score, tags, summary, ‚Ä¶)
 * @returns {Promise<boolean>} true ‚Äî –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ö–æ—Ç—è –±—ã –≤ –æ–¥–∏–Ω —á–∞—Ç
 */
export async function sendAlert(feedback) {
  const token = process.env.TELEGRAM_BOT_TOKEN || process.env.TG_BOT_TOKEN;
  const idsRaw =
    process.env.TELEGRAM_CHAT_IDS ||
    process.env.TELEGRAM_CHAT_ID ||
    process.env.TG_CHAT_IDS ||
    process.env.TG_CHAT_ID;

  if (!token) {
    console.warn('‚ö†Ô∏è Telegram: TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –∞–ª–µ—Ä—Ç –ø—Ä–æ–ø—É—â–µ–Ω');
    return false;
  }
  if (!idsRaw) {
    console.warn('‚ö†Ô∏è Telegram: TELEGRAM_CHAT_IDS/ID –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –∞–ª–µ—Ä—Ç –ø—Ä–æ–ø—É—â–µ–Ω');
    return false;
  }

  const chatIds = String(idsRaw)
    .split(/[,\s]+/)
    .map(s => s.trim())
    .filter(Boolean);

  if (chatIds.length === 0) {
    console.warn('‚ö†Ô∏è Telegram: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö chat_id ‚Äî –∞–ª–µ—Ä—Ç –ø—Ä–æ–ø—É—â–µ–Ω');
    return false;
  }

  const text = buildMessage(feedback);

  let success = 0;
  for (const id of chatIds) {
    const ok = await sendToChat({ token, chatId: id, text });
    if (ok) success++;
  }

  if (success > 0) {
    console.log(`‚úÖ Telegram alert –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (${success}/${chatIds.length})`);
    return true;
  } else {
    // –ù–µ –±—Ä–æ—Å–∞–µ–º AggregateError ‚Äî –ø—Ä–æ—Å—Ç–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –Ω–µ—É—Å–ø–µ—Ö–∞
    console.warn('‚ùå Telegram alert –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∏ –≤ –æ–¥–∏–Ω —á–∞—Ç');
    return false;
  }
}

export default { sendAlert };
