// apps/backend/lib/telegram.js
import TelegramBot from 'node-telegram-bot-api';
import { supabaseAdmin } from './supabase.js';

const TOKEN = process.env.TELEGRAM_TOKEN || process.env.TELEGRAM_BOT_TOKEN;
const CHAT_IDS_RAW =
  process.env.TELEGRAM_CHAT_IDS ||
  process.env.TELEGRAM_CHAT_ID ||          // –ø–æ–¥–¥–µ—Ä–∂–∏–º –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ id
  process.env.TG_CHAT_IDS ||
  process.env.TG_CHAT_ID;

const BUCKET = process.env.SUPABASE_BUCKET;

// –∂–µ–ª–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
const FOURTEEN_DAYS = 14 * 24 * 60 * 60;     // 1209600 —Å–µ–∫
const SEVEN_DAYS    = 7  * 24 * 60 * 60;     // 604800 —Å–µ–∫

function getBot() {
  if (!TOKEN || !CHAT_IDS_RAW) {
    console.warn('‚ö†Ô∏è TELEGRAM_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID(S) –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –∞–ª–µ—Ä—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã');
    return null;
  }
  return new TelegramBot(TOKEN, { polling: false });
}

function htmlEscape(s = '') {
  return String(s)
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;');
}

function fmtPercent01(x) {
  const n = Number.isFinite(Number(x)) ? Math.max(0, Math.min(1, Number(x))) : 0.5;
  return (n * 100).toFixed(0) + '%';
}

function isCritical(sentiment, score) {
  const s = String(sentiment || '').toLowerCase();
  const v = Number(score);
  // –∫—Ä–∏—Ç–∏—á–Ω–æ: —è–≤–Ω—ã–π –Ω–µ–≥–∞—Ç–∏–≤ –∏ –Ω–∏–∑–∫–∏–π —Å–∫–æ—Ä
  return (s.includes('–Ω–µ–≥–∞—Ç–∏–≤') || s.includes('negative')) && Number.isFinite(v) && v <= 0.4;
}

function pickTitle(sentiment, emotion_score) {
  const s = String(sentiment || '').toLowerCase();
  if (isCritical(s, emotion_score)) return 'üö® –ö—Ä–∏—Ç–∏—á–Ω—ã–π –æ—Ç–∑—ã–≤!';
  if (s.includes('–ø–æ–ª–æ–∂') || s.includes('positive')) return 'üíö –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤';
  if (s.includes('–Ω–µ–≥–∞—Ç–∏–≤') || s.includes('negative')) return 'üü• –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–∑—ã–≤';
  return 'üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤';
}

async function makeAudioUrl(feedback) {
  // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –±–∞–∫–µ—Ç–µ
  let audioPath = feedback.audio_path;
  if (!audioPath && feedback.audio_url) {
    audioPath = feedback.audio_url.replace(
      /^https?:\/\/[^/]+\/storage\/v1\/object\/public\/[^/]+\//,
      ''
    );
  }

  const base =
    process.env.PUBLIC_BASE_URL ||
    process.env.FEEDBACK_API_URL ||
    'https://feedbacker3.onrender.com';

  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º ¬´–≤–µ—á–Ω—É—é¬ª —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ —Ä–µ–¥–∏—Ä–µ–∫—Ç-—ç–Ω–¥–ø–æ–∏–Ω—Ç
  let audioUrl = `${base}/feedback/redirect-audio/${feedback.id}`;

  // –ü—ã—Ç–∞–µ–º—Å—è –¥–∞—Ç—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É (14–¥ ‚Üí 7–¥), –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
  if (audioPath && BUCKET) {
    let res = await supabaseAdmin.storage.from(BUCKET).createSignedUrl(audioPath, FOURTEEN_DAYS);
    if (res.error) {
      console.warn('‚ö†Ô∏è createSignedUrl(14d) error:', res.error.message);
      res = await supabaseAdmin.storage.from(BUCKET).createSignedUrl(audioPath, SEVEN_DAYS);
    }
    if (!res.error && res.data?.signedUrl) {
      audioUrl = res.data.signedUrl;
    } else {
      console.warn('‚ö†Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ redirect-audio —Å—Å—ã–ª–∫—É (–±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ç—å on-demand)');
    }
  }

  return { audioUrl, base };
}

function buildHtmlMessage(feedback, { audioUrl, base }) {
  const {
    id,
    shop_id,
    device_id,
    is_anonymous,
    sentiment,
    emotion_score,
    tags = [],
    summary = '',
    transcript = '',
    timestamp,
  } = feedback || {};

  const title = pickTitle(sentiment, emotion_score);
  const critical = isCritical(sentiment, emotion_score) ? ' ‚Äî <b>–ö–†–ò–¢–ò–ß–ù–û</b>' : '';
  const scoreStr = fmtPercent01(emotion_score);

  const safeShop = htmlEscape(shop_id || '‚Äî');
  const safeDev  = htmlEscape(device_id || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
  const safeAnon = is_anonymous ? '–î–∞' : '–ù–µ—Ç';
  const safeSent = htmlEscape(sentiment || '‚Äî');
  const safeTags = (Array.isArray(tags) && tags.length) ? htmlEscape(tags.join(', ')) : '‚Äî';
  const safeSum  = summary ? htmlEscape(summary) : '‚Äî';

  const fullUrl  = `${base}/feedback/full/${id}`;

  // –∫–æ—Ä–æ—Ç–∫–∞—è ¬´–ø—Ä–µ–≤—å—é¬ª-—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ (–¥–æ 240 —Å–∏–º–≤–æ–ª–æ–≤, –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É)
  const preview = String(transcript || '').replace(/\s+/g, ' ').slice(0, 240);
  const safeTranscript = preview ? `\n<i>${htmlEscape(preview)}</i>` : '';

  return (
`<b>${htmlEscape(title)}</b>${critical}
–ú–∞–≥–∞–∑–∏–Ω: <b>${safeShop}</b>
–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: <b>${safeDev}</b>
–ê–Ω–æ–Ω–∏–º–Ω–æ: <b>${safeAnon}</b>
–í—Ä–µ–º—è: <i>${htmlEscape(timestamp || new Date().toISOString())}</i>

–û—Ü–µ–Ω–∫–∞ —ç–º–æ—Ü–∏–π: <b>${safeSent}</b> (${scoreStr})
–¢–µ–≥–∏: <b>${safeTags}</b>
–ö—Ä–∞—Ç–∫–æ: ${safeSum}

<a href="${htmlEscape(audioUrl)}">üéß –°–ª—É—à–∞—Ç—å –∞—É–¥–∏–æ</a> ¬∑ <a href="${htmlEscape(fullUrl)}">üìÑ –î–µ—Ç–∞–ª–∏/–ø–æ–ª–Ω–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞</a>${safeTranscript}`
  );
}

export async function sendAlert(feedback) {
  const bot = getBot();
  if (!bot) return;

  try {
    const { audioUrl, base } = await makeAudioUrl(feedback);
    const msg = buildHtmlMessage(feedback, { audioUrl, base });

    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö chat_id —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é/–ø—Ä–æ–±–µ–ª
    const chatIds = String(CHAT_IDS_RAW)
      .split(/[,\s]+/)
      .map(s => s.trim())
      .filter(Boolean);

    let okCount = 0;
    for (const chatId of chatIds) {
      try {
        await bot.sendMessage(chatId, msg, {
          parse_mode: 'HTML',
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[{ text: 'üìÑ –ü–æ–ª–Ω–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞', url: `${base}/feedback/full/${feedback.id}` }]]
          }
        });
        okCount++;
      } catch (e) {
        // –ù–µ –≤–∞–ª–∏–º –≤–µ—Å—å –∞–ª–µ—Ä—Ç: –ª–æ–≥–∏—Ä—É–µ–º –∏ –∏–¥—ë–º –¥–∞–ª—å—à–µ
        console.warn(`‚ö†Ô∏è Telegram sendMessage failed for chat ${chatId}:`, e?.message || e);
      }
    }

    if (okCount > 0) {
      console.log(`‚úÖ Telegram alert –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (${okCount}/${chatIds.length})`);
    } else {
      console.warn('‚ùå Telegram alert –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∏ –≤ –æ–¥–∏–Ω —á–∞—Ç');
    }
  } catch (err) {
    // –ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö AggregateError ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram alert:', err?.message || err);
  }
}
