// apps/backend/lib/telegram.js
import TelegramBot from 'node-telegram-bot-api';
import { supabaseAdmin } from './supabase.js';

const TOKEN  = process.env.TELEGRAM_BOT_TOKEN || process.env.TELEGRAM_TOKEN;
const CHAT_ID = process.env.TELEGRAM_CHAT_ID;
const BUCKET  = process.env.SUPABASE_BUCKET;

// –ü–æ—Ä–æ–≥–æ–≤—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, –Ω–æ –Ω–µ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
const NEG_THRESHOLD = Number.parseFloat(String(process.env.TELEGRAM_ALERT_THRESHOLD ?? '0.4').replace(',', '.'));
const POS_THRESHOLD = Number.parseFloat(String(process.env.TELEGRAM_POSITIVE_THRESHOLD ?? '0.7').replace(',', '.'));

function getBot() {
  if (!TOKEN || !CHAT_ID) {
    console.warn('‚ö†Ô∏è TELEGRAM_TOKEN/TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –∞–ª–µ—Ä—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã');
    return null;
  }
  return new TelegramBot(TOKEN, { polling: false });
}

function escapeHTML(s = '') {
  return String(s)
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;');
}

function pickCategory(sentiment, score) {
  const s = (sentiment || '').toLowerCase();

  if (s.includes('–Ω–µ–≥–∞—Ç–∏–≤') || s.includes('negative')) return 'negative';
  if (s.includes('–ø–æ–∑–∏—Ç–∏–≤') || s.includes('–ø–æ–ª–æ–∂–∏—Ç') || s.includes('positive')) return 'positive';
  if (s.includes('–Ω–µ–π—Ç—Ä') || s.includes('neutral')) return 'neutral';

  if (typeof score === 'number' && !Number.isNaN(score)) {
    if (score < NEG_THRESHOLD) return 'negative';
    if (score >= POS_THRESHOLD) return 'positive';
  }
  return 'neutral';
}

function titleByCategory(cat) {
  switch (cat) {
    case 'negative': return 'üö® –ö—Ä–∏—Ç–∏—á–Ω—ã–π –æ—Ç–∑—ã–≤!';
    case 'positive': return '–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤';
    default:         return '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤';
  }
}

export async function sendAlert(feedback) {
  const bot = getBot();
  if (!bot) return;

  try {
    // 1) –ì–æ—Ç–æ–≤–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏–æ (signed URL)
    let audioPath = feedback.audio_path;
    if (!audioPath && feedback.audio_url) {
      // –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø—Ä–∏—Å–ª–∞–ª–∏ –ø—É–±–ª–∏—á–Ω—ã–π URL ‚Äî –ø—ã—Ç–∞–µ–º—Å—è –≤—ã—Ç–∞—â–∏—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
      audioPath = feedback.audio_url.replace(/^https?:\/\/[^/]+\/storage\/v1\/object\/public\/[^/]+\//, '');
    }

    let audioUrl = null;
    if (audioPath) {
      const { data: s, error: se } = await supabaseAdmin
        .storage.from(BUCKET)
        .createSignedUrl(audioPath, 60);
      if (!se && s?.signedUrl) audioUrl = s.signedUrl;
    }

    // 2) –ö–æ—Ä–æ—Ç–∫–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ (–º–∞–∫—Å. 4 —Å—Ç—Ä–æ–∫–∏ / ~300 —Å–∏–º–≤.)
    let transcriptBlock = '';
    if (feedback.transcript) {
      const raw = String(feedback.transcript);
      const short = raw.length > 300 ? `${raw.slice(0, 300)}‚Ä¶` : raw;
      const lines = short.split('\n').slice(0, 4).join('\n');
      transcriptBlock = `\n\nüó£ <b>–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:</b>\n${escapeHTML(lines)}`;
    }

    // 3) –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const score = (typeof feedback.emotion_score === 'number')
      ? feedback.emotion_score
      : Number.parseFloat(feedback.emotion_score);

    const category = pickCategory(feedback.sentiment, score);
    const title = titleByCategory(category);

    // 4) –ö–Ω–æ–ø–∫–∏
    const base = process.env.FEEDBACK_API_URL
      || process.env.RENDER_EXTERNAL_URL
      || 'http://localhost:3000';
    const fullTranscriptUrl = `${base}/feedback/full/${feedback.id}`;

    const buttons = [
      [{ text: 'üìÑ –ü–æ–ª–Ω–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞', url: fullTranscriptUrl }],
    ];
    if (audioUrl) {
      buttons[0].push({ text: 'üéß –°–ª—É—à–∞—Ç—å –∞—É–¥–∏–æ', url: audioUrl });
    }

    // 5) –¢–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è (HTML)
    const msg =
      `<b>${title}</b>\n` +
      `<b>–ú–∞–≥–∞–∑–∏–Ω:</b> ${escapeHTML(feedback.shop_id || '‚Äî')}\n` +
      `<b>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</b> ${escapeHTML(feedback.device_id || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n` +
      `<b>–ê–Ω–æ–Ω–∏–º–Ω–æ:</b> ${feedback.is_anonymous ? '–î–∞' : '–ù–µ—Ç'}\n` +
      `<b>–û—Ü–µ–Ω–∫–∞ —ç–º–æ—Ü–∏–π:</b> ${Number.isFinite(score) ? score : '‚Äî'}\n` +
      `<b>–¢–µ–≥–∏:</b> ${escapeHTML((feedback.tags || []).join(', ') || '–Ω–µ—Ç')}\n` +
      `<b>–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b> ${escapeHTML(feedback.summary || '–Ω–µ—Ç')}` +
      `${transcriptBlock}`;

    await bot.sendMessage(CHAT_ID, msg, {
      parse_mode: 'HTML',
      reply_markup: { inline_keyboard: buttons },
      disable_web_page_preview: true,
    });

    console.log('‚úÖ Telegram alert –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram alert:', err?.response?.body |
