// apps/backend/lib/telegram.js
import TelegramBot from 'node-telegram-bot-api';
import { supabaseAdmin } from './supabase.js';

const TOKEN   = process.env.TELEGRAM_TOKEN || process.env.TELEGRAM_BOT_TOKEN || '';
const CHAT_ID = process.env.TELEGRAM_CHAT_ID || '';
const BUCKET  = process.env.SUPABASE_BUCKET || '';

/** HTML-—ç—Å–∫–µ–π–ø –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–∏ –≤ Telegram */
function esc(s = '') {
  return String(s)
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;');
}

function getBot() {
  if (!TOKEN || !CHAT_ID) {
    console.warn('‚ö†Ô∏è TELEGRAM_BOT_TOKEN/TELEGRAM_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –∞–ª–µ—Ä—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã');
    return null;
  }
  return new TelegramBot(TOKEN, { polling: false });
}

/** –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å signed URL; –µ—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ ‚Äî –ø—É–±–ª–∏—á–Ω—ã–π URL (–µ—Å–ª–∏ –±–∞–∫–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π) */
async function getAudioUrl(audioPath) {
  if (!audioPath || !BUCKET) return null;

  // 1) –ø—Ä–æ–±—É–µ–º signed URL (–µ—Å–ª–∏ –µ—Å—Ç—å supabaseAdmin)
  if (supabaseAdmin?.storage) {
    try {
      const { data: s, error: se } = await supabaseAdmin
        .storage.from(BUCKET)
        .createSignedUrl(audioPath, 60);
      if (!se && s?.signedUrl) return s.signedUrl;
    } catch (e) {
      console.warn('‚ö†Ô∏è createSignedUrl error:', e?.message || e);
    }
  }

  // 2) fallback –Ω–∞ public URL
  try {
    const { data } = supabaseAdmin.storage.from(BUCKET).getPublicUrl(audioPath);
    if (data?.publicUrl) return data.publicUrl;
  } catch (e) {
    console.warn('‚ö†Ô∏è getPublicUrl error:', e?.message || e);
  }
  return null;
}

/** –ê–∫–∫—É—Ä–∞—Ç–Ω–æ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º storage path –∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ ¬´–ø–æ–ª–Ω–æ–≥–æ¬ª URL */
function extractAudioPath(maybeUrl) {
  if (!maybeUrl) return null;

  // –µ—Å–ª–∏ —É–∂–µ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –ø—É—Ç—å –≤ –±–∞–∫–µ—Ç–µ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  if (!/^https?:\/\//i.test(maybeUrl)) return maybeUrl;

  // —Ç–∏–ø–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—É–±–ª–∏—á–Ω—ã—Ö/–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ Supabase
  // ‚Ä¶/storage/v1/object/(sign|public)/<bucket>/<path>
  const m = maybeUrl.match(/\/storage\/v1\/object\/(?:sign|public)\/([^/]+)\/(.+)$/);
  if (m) {
    const [, bucket, path] = m;
    if (!BUCKET || BUCKET === bucket) return path;
  }
  return null;
}

export async function sendAlert(feedback) {
  const bot = getBot();
  if (!bot) return;

  try {
    // --- –∞—É–¥–∏–æ-—Å—Å—ã–ª–∫–∞ ---
    let audioPath = feedback.audio_path
      || extractAudioPath(feedback.audio_url)
      || null;

    let audioUrl = await getAudioUrl(audioPath);
    if (!audioUrl) audioUrl = 'https://example.com'; // –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–≥–ª—É—à–µ—á–Ω—ã–π URL

    // --- –ø—Ä–µ–≤—å—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ (–º–∞–∫—Å 4 —Å—Ç—Ä–æ–∫–∏ / 500 —Å–∏–º–≤–æ–ª–æ–≤) ---
    let transcriptText = '';
    if (feedback.transcript) {
      const raw = String(feedback.transcript).trim();
      const fourLines = raw.split('\n').slice(0, 4).join('\n');
      const cut = fourLines.length > 500 ? `${fourLines.slice(0, 500)}‚Ä¶` : fourLines;
      transcriptText = `\nüó£ <b>–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:</b>\n${esc(cut)}`;
    }

    const baseApi = process.env.FEEDBACK_API_URL || '';
    const fullTranscriptUrl = baseApi
      ? `${baseApi.replace(/\/+$/, '')}/feedback/full/${encodeURIComponent(feedback.id)}`
      : null;

    const msgParts = [
      'üö® <b>–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–∑—ã–≤!</b>',
      `<b>–ú–∞–≥–∞–∑–∏–Ω:</b> ${esc(feedback.shop_id)}`,
      `<b>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</b> ${esc(feedback.device_id || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}`,
      `<b>–ê–Ω–æ–Ω–∏–º–Ω–æ:</b> ${feedback.is_anonymous ? '–î–∞' : '–ù–µ—Ç'}`,
      `<b>–û—Ü–µ–Ω–∫–∞ —ç–º–æ—Ü–∏–π:</b> ${feedback.emotion_score ?? '‚Äî'}`,
      `<b>–¢–µ–≥–∏:</b> ${esc(Array.isArray(feedback.tags) ? feedback.tags.join(', ') : (feedback.tags || '–Ω–µ—Ç'))}`,
      `<b>–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b> ${esc(feedback.summary || '–Ω–µ—Ç')}`,
      transcriptText,
      `\nüéß <a href="${esc(audioUrl)}">–°–ª—É—à–∞—Ç—å –∞—É–¥–∏–æ</a>`
    ];

    const msg = msgParts.filter(Boolean).join('\n');

    await bot.sendMessage(CHAT_ID, msg, {
      parse_mode: 'HTML',
      reply_markup: fullTranscriptUrl
        ? { inline_keyboard: [[{ text: 'üìÑ –ü–æ–ª–Ω–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞', url: fullTranscriptUrl }]] }
        : undefined,
      disable_web_page_preview: true,
    });

    console.log('‚úÖ Telegram alert –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram alert:', err?.message || err);
  }
}
