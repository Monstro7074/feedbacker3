// apps/backend/lib/telegram.js
import TelegramBot from 'node-telegram-bot-api';
import { supabaseAdmin } from './supabase.js';

const TOKEN = process.env.TELEGRAM_TOKEN || process.env.TELEGRAM_BOT_TOKEN;
const CHAT_ID = process.env.TELEGRAM_CHAT_ID;
const BUCKET = process.env.SUPABASE_BUCKET;

function getBot() {
  if (!TOKEN || !CHAT_ID) {
    console.warn('‚ö†Ô∏è TELEGRAM_TOKEN/TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞');
    return null;
  }
  return new TelegramBot(TOKEN, { polling: false });
}

/**
 * –í—ã–±–æ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–æ —ç–º–æ—Ü–∏–∏/–∫–æ–Ω—Ç–µ–Ω—Ç—É
 * - sentiment: '–Ω–µ–≥–∞—Ç–∏–≤' | '–ø–æ–∑–∏—Ç–∏–≤' | '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π' (–∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
 * - emotion_score: [0..1] (—á–µ–º –Ω–∏–∂–µ ‚Äî —Ç–µ–º —Ö—É–∂–µ)
 * - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—â–µ–º ¬´–∫—Ä–∞—Å–Ω—ã–µ¬ª —Å–ª–æ–≤–∞ –≤ summary/transcript
 */
function chooseTitle(feedback) {
  const s = String(feedback.sentiment || '').toLowerCase();
  const score = typeof feedback.emotion_score === 'number' ? feedback.emotion_score : null;
  const text = `${feedback.summary || ''} ${feedback.transcript || ''}`.toLowerCase();

  const RED_FLAGS = [
    '–ø–ª–æ—Ö–æ', '—É–∂–∞—Å', '–≤–æ–∑–≤—Ä–∞—Ç', '–≤–µ—Ä–Ω—É—Ç—å', '–∂–∞–ª–æ–±', '—Å–∫–∞–Ω–¥–∞–ª', '—Ä–∞–∑–æ—á–∞—Ä', '–Ω–µ–Ω—Ä–∞–≤',
    '–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è', '—Å–ª–æ–º', '–±—Ä–∞–∫', '–∫–∞—á–µ—Å—Ç–≤–æ', '–¥–ª–∏–Ω–Ω', '–∫–æ—Ä–æ—Ç–∫', '–º–∞–ª', '–≤–µ–ª–∏–∫–∞'
  ];
  const hasRed = RED_FLAGS.some(w => text.includes(w));

  // –ñ—ë—Å—Ç–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ sentiment
  if (s.includes('–Ω–µ–≥–∞—Ç–∏–≤')) return 'üö® *–ö—Ä–∏—Ç–∏—á–Ω—ã–π –æ—Ç–∑—ã–≤!*';
  if (s.includes('–ø–æ–∑–∏—Ç–∏–≤')) return 'üíö *–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤*';
  if (s.includes('–Ω–µ–π—Ç—Ä–∞–ª')) return 'üòê *–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤*';

  // –ï—Å–ª–∏ sentiment –Ω–µ –∑–∞–¥–∞–Ω ‚Äì fallback –ø–æ score/–∫–æ–Ω—Ç–µ–Ω—Ç—É
  if (score !== null) {
    if (score < 0.45 || hasRed) return 'üö® *–ö—Ä–∏—Ç–∏—á–Ω—ã–π –æ—Ç–∑—ã–≤!*';
    if (score >= 0.7) return 'üíö *–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤*';
    return 'üòê *–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤*';
  }
  return hasRed ? 'üö® *–ö—Ä–∏—Ç–∏—á–Ω—ã–π –æ—Ç–∑—ã–≤!*' : 'üòê *–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤*';
}

function fmtScore(n) {
  if (typeof n !== 'number' || Number.isNaN(n)) return '‚Äî';
  return n.toFixed(2);
}

/**
 * –ü—Ä–∏–º–∏—Ç–∏–≤–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown (–ø–æ–¥ —Ñ–æ—Ä–º–∞—Ç parse_mode: 'Markdown')
 * –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É–±—Ä–∞—Ç—å —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—â–µ –≤—Å–µ–≥–æ –ª–æ–º–∞—é—Ç —Ä–∞–∑–º–µ—Ç–∫—É.
 */
function md(s = '') {
  return String(s).replace(/(\*|_|\[|\]|\(|\)|`|>)/g, '\\$1');
}

export async function sendAlert(feedback) {
  const bot = getBot();
  if (!bot) return;

  try {
    // 1) –ü–æ–ª—É—á–∞–µ–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏–æ
    let audioPath = feedback.audio_path;
    if (!audioPath && feedback.audio_url) {
      // –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª –ø—É–±–ª–∏–∫—É–µ–º—É—é —Å—Å—ã–ª–∫—É ‚Äî –≤—ã—Ä–µ–∂–µ–º –ø—É—Ç—å –≤–Ω—É—Ç—Ä–∏ –±–∞–∫–µ—Ç–∞
      audioPath = feedback.audio_url.replace(
        /^https?:\/\/[^/]+\/storage\/v1\/object\/public\/[^/]+\//,
        ''
      );
    }

    let audioUrl = '–ù–µ—Ç —Å—Å—ã–ª–∫–∏';
    if (audioPath) {
      const { data: s, error: se } = await supabaseAdmin
        .storage.from(BUCKET)
        .createSignedUrl(audioPath, 60);
      if (!se && s?.signedUrl) audioUrl = s.signedUrl;
    }

    // 2) –ö–æ—Ä–æ—Ç–∫–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ (–º–∞–∫—Å 4 —Å—Ç—Ä–æ–∫–∏)
    let transcriptBlock = '';
    if (feedback.transcript) {
      const lines = String(feedback.transcript).split('\n').map(l => l.trim()).filter(Boolean);
      const trimmed = lines.length > 4 ? [...lines.slice(0, 4), '‚Ä¶'] : lines;
      transcriptBlock = `\nüó£ *–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:*\n${md(trimmed.join('\n'))}`;
    }

    // 3) –ó–∞–≥–æ–ª–æ–≤–æ–∫
    const title = chooseTitle(feedback);

    // 4) –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    const base = process.env.FEEDBACK_API_URL || 'https://example.com';
    const fullTranscriptUrl = `${base}/feedback/full/${feedback.id}`;

    // 5) –¢–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è (Markdown)
    const msg =
`${title}
*–ú–∞–≥–∞–∑–∏–Ω:* ${md(feedback.shop_id)}
*–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:* ${md(feedback.device_id || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
*–ê–Ω–æ–Ω–∏–º–Ω–æ:* ${feedback.is_anonymous ? '–î–∞' : '–ù–µ—Ç'}
*–û—Ü–µ–Ω–∫–∞ —ç–º–æ—Ü–∏–π:* ${fmtScore(feedback.emotion_score)}
*–¢–µ–≥–∏:* ${md((feedback.tags || []).join(', ') || '–Ω–µ—Ç')}
*–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:* ${md(feedback.summary || '–Ω–µ—Ç')}${transcriptBlock}

üéß [–°–ª—É—à–∞—Ç—å –∞—É–¥–∏–æ](${audioUrl})`;

    // 6) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–°–ï–ì–î–ê (–±–µ–∑ –ø–æ—Ä–æ–≥–æ–≤/—É—Å–ª–æ–≤–∏–π)
    await bot.sendMessage(CHAT_ID, msg, {
      parse_mode: 'Markdown',
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: [[{ text: 'üìÑ –ü–æ–ª–Ω–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞', url: fullTranscriptUrl }]]
      }
    });

    console.log('‚úÖ Telegram alert –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram alert:', err?.message || err);
  }
}
