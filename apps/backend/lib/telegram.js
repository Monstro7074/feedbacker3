// apps/backend/lib/telegram.js
import TelegramBot from 'node-telegram-bot-api';
import { supabaseAdmin } from './supabase.js';

const TOKEN = process.env.TELEGRAM_TOKEN || process.env.TELEGRAM_BOT_TOKEN;
const CHAT_ID = process.env.TELEGRAM_CHAT_ID;
const BUCKET = process.env.SUPABASE_BUCKET;

function getBot() {
  if (!TOKEN || !CHAT_ID) {
    console.warn('‚ö†Ô∏è TELEGRAM_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –∞–ª–µ—Ä—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã');
    return null;
  }
  return new TelegramBot(TOKEN, { polling: false });
}

function parseNumber(str, def) {
  const n = Number((str ?? '').toString().replace(',', '.'));
  return Number.isFinite(n) ? n : def;
}

function classify(feedback) {
  const scoreRaw = feedback?.emotion_score;
  const score = typeof scoreRaw === 'number' ? scoreRaw : parseFloat(scoreRaw);
  const sentiment = String(feedback?.sentiment || '').toLowerCase();

  const crit = parseNumber(process.env.TELEGRAM_ALERT_THRESHOLD, 0.4);   // score < crit ‚Üí –ö—Ä–∏—Ç–∏—á–Ω—ã–π
  const posT = parseNumber(process.env.TELEGRAM_POSITIVE_THRESHOLD, 0.7); // score >= posT ‚Üí –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π

  let title = '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤';
  // –°–Ω–∞—á–∞–ª–∞ –ø–æ score, –µ—Å–ª–∏ –µ—Å—Ç—å:
  if (Number.isFinite(score)) {
    if (score < crit) title = 'üö® –ö—Ä–∏—Ç–∏—á–Ω—ã–π –æ—Ç–∑—ã–≤!';
    else if (score >= posT) title = '–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤';
    else title = '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤';
  } else {
    // –§–æ–ª–±—ç–∫ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    if (['negative', '–Ω–µ–≥–∞—Ç–∏–≤'].includes(sentiment)) title = 'üö® –ö—Ä–∏—Ç–∏—á–Ω—ã–π –æ—Ç–∑—ã–≤!';
    else if (['positive', '–ø–æ–∑–∏—Ç–∏–≤'].includes(sentiment)) title = '–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤';
  }

  return {
    title,
    score: Number.isFinite(score) ? score : null,
    thresholds: { critical: crit, positive: posT },
  };
}

export async function sendAlert(feedback) {
  const bot = getBot();
  if (!bot) return;

  try {
    // 1) –ù–∞–π–¥—ë–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –±–∞–∫–µ—Ç–µ ‚Üí —Å–¥–µ–ª–∞–µ–º signed URL
    let audioPath = feedback?.audio_path;
    if (!audioPath && feedback?.audio_url) {
      // –≤—ã—Ç–∞—â–∏–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL
      audioPath = feedback.audio_url.replace(
        /^https?:\/\/[^/]+\/storage\/v1\/object\/public\/[^/]+\//,
        ''
      );
    }

    let audioUrl = '–ù–µ—Ç —Å—Å—ã–ª–∫–∏';
    if (audioPath) {
      const { data: s, error: se } = await supabaseAdmin
        .storage.from(BUCKET)
        .createSignedUrl(audioPath, 60);
      if (!se && s?.signedUrl) audioUrl = s.signedUrl;
    }

    // 2) –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ—Ä–æ–≥–∏
    const { title, score, thresholds } = classify(feedback);

    // 3) –ö–æ—Ä–æ—Ç–∫–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ (–¥–æ 4 —Å—Ç—Ä–æ–∫)
    let transcriptText = '';
    if (feedback?.transcript) {
      const lines = String(feedback.transcript).trim().split('\n');
      transcriptText =
        '\nüó£ *–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:*\n' +
        (lines.length > 4 ? `${lines.slice(0, 4).join('\n')}‚Ä¶` : lines.join('\n'));
    }

    // 4) –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª–Ω—É—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É (—á–µ—Ä–µ–∑ –≤–∞—à backend)
    const base = process.env.FEEDBACK_API_URL || 'https://example.com';
    const fullTranscriptUrl = `${base}/feedback/full/${feedback.id}`;

    const tags = Array.isArray(feedback?.tags) ? feedback.tags.join(', ') : '–Ω–µ—Ç';
    const summary = feedback?.summary || '–Ω–µ—Ç';
    const device = feedback?.device_id || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const shop = feedback?.shop_id || '‚Äî';

    const scoreLine = score === null
      ? '*–û—Ü–µ–Ω–∫–∞ —ç–º–æ—Ü–∏–π:* –Ω–µ—Ç'
      : `*–û—Ü–µ–Ω–∫–∞ —ç–º–æ—Ü–∏–π:* ${score} (–∫—Ä–∏—Ç–∏—á. < ${thresholds.critical}, –ø–æ–ª–æ–∂. ‚â• ${thresholds.positive})`;

    const msg =
`${title}
*–ú–∞–≥–∞–∑–∏–Ω:* ${shop}
*–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:* ${device}
*–ê–Ω–æ–Ω–∏–º–Ω–æ:* ${feedback?.is_anonymous ? '–î–∞' : '–ù–µ—Ç'}
${scoreLine}
*–¢–µ–≥–∏:* ${tags}
*–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:* ${summary}${transcriptText}

üéß [–°–ª—É—à–∞—Ç—å –∞—É–¥–∏–æ](${audioUrl})`;

    await bot.sendMessage(CHAT_ID, msg, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [[{ text: 'üìÑ –ü–æ–ª–Ω–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞', url: fullTranscriptUrl }]],
      },
    });

    console.log('‚úÖ Telegram alert –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram alert:', err?.message || err);
  }
}
