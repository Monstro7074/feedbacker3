name: backend-ci

on:
  push:
    branches: [ main, feedbacker-ci ]
    paths:
      - "apps/backend/**"
      - ".github/workflows/backend-ci.yml"
  pull_request:
    branches: [ main, feedbacker-ci ]
    paths:
      - "apps/backend/**"
      - ".github/workflows/backend-ci.yml"

permissions:
  contents: read

concurrency:
  group: backend-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/backend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: |
            apps/backend/package-lock.json

      - name: Install deps
        run: |
          if [ -f "package-lock.json" ]; then
            echo "Using npm ci (lockfile exists)"
            npm ci
          else
            echo "Lockfile not found, using npm install (temporary)"
            npm install --no-audit --no-fund --prefer-offline
          fi

      - name: Syntax check (ESM)
        run: |
          node --check server.js
          node --check routes/feedback.js
      
      - name: Lint
        run: npm run lint

      - name: Unit tests
        run: npx vitest run

      # === DEPLOY TO RENDER ===
      - name: Deploy to Render
        if: ${{ (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/feedbacker-ci') && success() }}
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          curl -sS -X POST "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Content-Type: application/json" \
            -d '{}'

      # === WARMUP AFTER DEPLOY ===
      - name: Warm up backend (retry /health after deploy)
        env:
          FEEDBACK_API_URL: ${{ secrets.FEEDBACK_API_URL }}
        run: |
          echo "Warming up $FEEDBACK_API_URL ..."
          for i in $(seq 1 30); do
            code=$(curl -sS -o /dev/null -w "%{http_code}" "$FEEDBACK_API_URL/health" || true)
            echo "Attempt $i -> HTTP $code"
            if [ "$code" = "200" ]; then exit 0; fi
            sleep 5
          done
          echo "Backend is not ready after retries"; exit 1

      # === POSTMAN / NEWMAN SANITY (ONE-CLICK 0902) ===
      - name: Postman (Newman) • One-Click sanity
        if: ${{ hashFiles('apps/backend/postman/*.json') != '' }}
        working-directory: apps/backend/postman
        run: |
          npx --yes newman run Feedbacker_OneClick_0902.postman_collection.json \
            -e Feedbacker_ENV_0902.postman_environment.json \
            --timeout-request 15000 --timeout 180000 --delay-request 300 \
            --reporters cli,junit --reporter-junit-export ../../newman-results.xml
        env:
          FEEDBACK_API_URL: ${{ secrets.FEEDBACK_API_URL }}
          TELEGRAM_ALERT_THRESHOLD: ${{ secrets.TELEGRAM_ALERT_THRESHOLD }}

      - name: Upload Newman JUnit
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: newman-junit
          path: apps/backend/newman-results.xml

      # (Опционально) быстрый дымовой вывод для дебага
      - name: Quick debug endpoints
        if: ${{ always() }}
        env:
          FEEDBACK_API_URL: ${{ secrets.FEEDBACK_API_URL }}
        run: |
          set -x
          curl -i "$FEEDBACK_API_URL/health" || true
          curl -i "$FEEDBACK_API_URL/" || true
